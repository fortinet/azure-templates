{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the FortiGate VM"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the FortiGate VM"
      }
    },
    "fortiGateNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Naming prefix for all deployed resources. The FortiGate VM will have the suffix '-fgt'. For example if the prefix is 'ACME-01' the FortiGate will be named 'acme-01-fgt'"
      }
    },
    "fortiGateName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Custom naming for the deployed FortiGate resources. This will override the automatic generation based on the prefix for the FortiGate name."
      }
    },
    "fortiGateImageSKU_x64": {
      "type": "string",
      "defaultValue": "fortinet_fg-vm",
      "allowedValues": [
        "fortinet_fg-vm",
        "fortinet_fg-vm_payg_2023",
        "fortinet_fg-vm_g2",
        "fortinet_fg-vm_payg_2023_g2"
      ],
      "metadata": {
        "description": "Identifies whether to to use PAYG (on demand licensing) or BYOL license model (where license is purchased separately"
      }
    },
    "fortiGateImageSKU_arm64": {
      "type": "string",
      "defaultValue": "fortinet_fg-vm_arm64",
      "allowedValues": [
        "fortinet_fg-vm_arm64",
        "fortinet_fg-vm_payg_2023_arm64"
      ],
      "metadata": {
        "description": "Identifies whether to to use PAYG (on demand licensing) or BYOL license model (where license is purchased separately"
      }
    },
    "fortiGateInstanceArchitecture": {
      "type": "string",
      "defaultValue": "x64",
      "allowedValues": [
        "x64",
        "arm64"
      ],
      "metadata": {
        "description": "Indicates the instance Architecture of the VM deployment. Intel/AMD or ARM"
      }
    },
    "fortiGateImageVersion_x64": {
      "type": "string",
      "defaultValue": "7.4.6",
      "allowedValues": [
        "latest",
        "7.6.1",
        "7.6.0",
        "7.4.6",
        "7.4.5",
        "7.4.4",
        "7.4.3",
        "7.4.2",
        "7.4.1",
        "7.4.0",
        "7.2.10",
        "7.2.9",
        "7.2.8",
        "7.2.7",
        "7.2.6",
        "7.2.5",
        "7.2.4",
        "7.2.3",
        "7.2.2",
        "7.2.1",
        "7.2.0",
        "7.0.15",
        "7.0.14",
        "7.0.13",
        "7.0.12",
        "7.0.11",
        "7.0.10",
        "7.0.9",
        "7.0.8",
        "7.0.6",
        "7.0.5",
        "7.0.4",
        "7.0.3",
        "7.0.2",
        "7.0.1",
        "7.0.0",
        "6.4.15",
        "6.4.13",
        "6.4.12",
        "6.4.11",
        "6.4.10",
        "6.4.9",
        "6.4.8",
        "6.4.7",
        "6.4.6",
        "6.4.5",
        "6.4.3",
        "6.4.2",
        "6.4.0",
        "6.2.5",
        "6.2.4",
        "6.2.2",
        "6.2.0"
      ],
      "metadata": {
        "description": "Select the image version"
      }
    },
    "fortiGateImageVersion_arm64": {
      "type": "string",
      "defaultValue": "7.4.6",
      "allowedValues": [
        "latest",
        "7.6.2",
        "7.6.1",
        "7.6.0",
        "7.4.6",
        "7.4.5",
        "7.4.4",
        "7.4.3",
        "7.2.10",
        "7.2.9",
        "7.2.8"
      ],
      "metadata": {
        "description": "Select the image version"
      }
    },
    "fortiGateAdditionalCustomData": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The ARM template provides a basic configuration. Additional configuration can be added here."
      }
    },
    "instanceType_x64": {
      "type": "string",
      "defaultValue": "Standard_F2s",
      "allowedValues": [
        "Standard_F2s",
        "Standard_F4s",
        "Standard_F8s",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_F2s_v2",
        "Standard_F4s_v2",
        "Standard_F8s_v2",
        "Standard_F16s_v2",
        "Standard_F32s_v2",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D2_v4",
        "Standard_D4_v4",
        "Standard_D8_v4",
        "Standard_D16_v4",
        "Standard_D32_v4",
        "Standard_D2s_v4",
        "Standard_D4s_v4",
        "Standard_D8s_v4",
        "Standard_D16s_v4",
        "Standard_D32s_v4",
        "Standard_D2a_v4",
        "Standard_D4a_v4",
        "Standard_D8a_v4",
        "Standard_D16a_v4",
        "Standard_D32a_v4",
        "Standard_D2as_v4",
        "Standard_D4as_v4",
        "Standard_D8as_v4",
        "Standard_D16as_v4",
        "Standard_D32as_v4",
        "Standard_D2_v5",
        "Standard_D4_v5",
        "Standard_D8_v5",
        "Standard_D16_v5",
        "Standard_D32_v5",
        "Standard_D2s_v5",
        "Standard_D4s_v5",
        "Standard_D8s_v5",
        "Standard_D16s_v5",
        "Standard_D32s_v5",
        "Standard_D2as_v5",
        "Standard_D4as_v5",
        "Standard_D8as_v5",
        "Standard_D16as_v5",
        "Standard_D32as_v5",
        "Standard_D2ads_v5",
        "Standard_D4ads_v5",
        "Standard_D8ads_v5",
        "Standard_D16ads_v5",
        "Standard_D32ads_v5"
      ],
      "metadata": {
        "description": "Virtual Machine size selection - must be F4 or other instance that supports 4 NICs"
      }
    },
    "instanceType_arm64": {
      "type": "string",
      "defaultValue": "Standard_D2ps_v5",
      "allowedValues": [
        "Standard_D2ps_v5",
        "Standard_D4ps_v5",
        "Standard_D8ps_v5",
        "Standard_D16ps_v5",
        "Standard_D32ps_v5",
        "Standard_D2pds_v5",
        "Standard_D4pds_v5",
        "Standard_D8pds_v5",
        "Standard_D16pds_v5",
        "Standard_D32pds_v5",
        "Standard_D2pls_v5",
        "Standard_D4pls_v5",
        "Standard_D8pls_v5",
        "Standard_D16pls_v5",
        "Standard_D32pls_v5",
        "Standard_D2plds_v5",
        "Standard_D4plds_v5",
        "Standard_D8plds_v5",
        "Standard_D16plds_v5",
        "Standard_D32plds_v5",
        "Standard_E2ps_v5",
        "Standard_E4ps_v5",
        "Standard_E8ps_v5",
        "Standard_E16ps_v5",
        "Standard_E32ps_v5",
        "Standard_E2pds_v5",
        "Standard_E4pds_v5",
        "Standard_E8pds_v5",
        "Standard_E16pds_v5",
        "Standard_E32pds_v5"
      ],
      "metadata": {
        "description": "Virtual Machine size selection - must be F4 or other instance that supports 4 NICs"
      }
    },
    "availabilityOptions": {
      "type": "string",
      "allowedValues": [
        "None",
        "Availability set",
        "Availability zone"
      ],
      "defaultValue": "None",
      "metadata": {
        "description": "Deploy FortiGate VM in an Availability Set or Availability Zones. If Availability Zones deployment is selected but the location does not support Availability Zones an Availability Set will be deployed. If Availability Zones deployment is selected and Availability Zones are available in the location, FortiGate A will be placed in Zone 1, FortiGate B will be placed in Zone 2"
      }
    },
    "existingAvailabilitySetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of existing Availability Set in case you want to replace or add a FortiGate to an existing cluster."
      }
    },
    "availabilityZoneNumber": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of existing Availability Set in case you want to replace or add a FortiGate to an existing cluster."
      }
    },
    "acceleratedNetworking": {
      "type": "string",
      "defaultValue": "false",
      "allowedValues": [
        "false",
        "true"
      ],
      "metadata": {
        "description": "Accelerated Networking enables direct connection between the VM and network card. Only available on 2 CPU F/Fs and 4 CPU D/Dsv2, D/Dsv3, E/Esv3, Fsv2, Lsv2, Ms/Mms and Ms/Mmsv2"
      }
    },
    "acceleratedConnections": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Accelerated connections provides an enhanced bandwidth at an additional cost"
      }
    },
    "acceleratedConnectionsSku": {
      "type": "string",
      "defaultValue": "A1",
      "allowedValues": [
        "A1",
        "A2",
        "A4",
        "A8"
      ],
      "metadata": {
        "description": "Accelerated Connections Auxiliary SKU bandwidth Tiers"
      }
    },
    "publicIP1NewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing",
        "none"
      ],
      "metadata": {
        "description": "Choose between an existing or new public IP address linked to the external interface of the FortiGate VM"
      }
    },
    "publicIP1Name": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of Public IP address, if no name is provided the default name will be the Resource Group Name as the Prefix and '-fgt-pip' as the suffix"
      }
    },
    "publicIP1ResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Public IP Resource Group, this value is required if an existing Public IP is selected"
      }
    },
    "vnetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Identify whether to use a new or existing vnet"
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Azure virtual network, required if utilizing an existing VNET. If no name is provided the default name will be the Resource Group Name as the Prefix and '-vnet' as the suffix"
      }
    },
    "vnetResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource Group containing the existing virtual network, leave blank if a new VNET is being utilize"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "172.16.136.0/22",
      "metadata": {
        "description": "Virtual Network Address prefix"
      }
    },
    "subnet1Name": {
      "type": "string",
      "defaultValue": "ExternalSubnet",
      "metadata": {
        "description": "Subnet 1 Name"
      }
    },
    "subnet1Prefix": {
      "type": "string",
      "defaultValue": "172.16.136.0/26",
      "metadata": {
        "description": "Subnet 1 Prefix"
      }
    },
    "subnet1StartAddress": {
      "type": "string",
      "defaultValue": "172.16.136.4",
      "metadata": {
        "description": "Subnet 1 start address, 1 consecutive private IPs are required"
      }
    },
    "subnet2Name": {
      "type": "string",
      "defaultValue": "InternalSubnet",
      "metadata": {
        "description": "Subnet 2 Subnet"
      }
    },
    "subnet2Prefix": {
      "type": "string",
      "defaultValue": "172.16.136.64/26",
      "metadata": {
        "description": "Subnet 2 Prefix"
      }
    },
    "subnet2StartAddress": {
      "type": "string",
      "defaultValue": "172.16.136.68",
      "metadata": {
        "description": "Subnet 2 start address, 1 consecutive private IPs are required"
      }
    },
    "subnet3Name": {
      "type": "string",
      "defaultValue": "ProtectedASubnet",
      "metadata": {
        "description": "Subnet 3 Name"
      }
    },
    "subnet3Prefix": {
      "type": "string",
      "defaultValue": "172.16.137.0/24",
      "metadata": {
        "description": "Subnet 3 Prefix"
      }
    },
    "serialConsole": {
      "type": "string",
      "defaultValue": "yes",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Enable Serial Console"
      }
    },
    "fortiManager": {
      "type": "string",
      "defaultValue": "no",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Connect to FortiManager"
      }
    },
    "fortiManagerIP": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "FortiManager IP or DNS name to connect to on port TCP/541"
      }
    },
    "fortiManagerSerial": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "FortiManager serial number to add the deployed FortiGate into the FortiManager"
      }
    },
    "fortiGateLicenseBYOL": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "FortiGate BYOL license content"
      }
    },
    "fortiGateLicenseFortiFlex": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "FortiGate BYOL FortiFlex license token"
      }
    },
    "customImageReference": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "By default, the deployment will use Azure Marketplace images. In specific cases, using BYOL custom FortiGate images can be deployed from support.fortinet.com."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "tagsByResource": {
      "type": "object",
      "defaultValue": {}
    },
    "fortinetTags": {
      "type": "object",
      "defaultValue": {
        "publisher": "Fortinet",
        "template": "A-Single-VM",
        "provider": "6EB3B02F-50E5-4A3E-8CB8-2E12925831VM"
      }
    }
  },
  "variables": {
    "imagePublisher": "fortinet",
    "imageOffer": "fortinet_fortigate-vm_v5",
    "fortiGateImageSKU": "[if(equals(parameters('fortiGateInstanceArchitecture'), 'arm64'), parameters('fortiGateImageSKU_arm64'), parameters('fortiGateImageSKU_x64'))]",
    "fortiGateImageVersion": "[if(equals(parameters('fortiGateInstanceArchitecture'), 'arm64'), parameters('fortiGateImageVersion_arm64'), parameters('fortiGateImageVersion_x64'))]",
    "instanceType": "[if(equals(parameters('fortiGateInstanceArchitecture'), 'arm64'), parameters('instanceType_arm64'), parameters('instanceType_x64'))]",
    "availabilitySetName": "[if(equals(parameters('existingAvailabilitySetName'),''),concat(parameters('fortiGateNamePrefix'),'-AvailabilitySet'),parameters('existingAvailabilitySetName'))]",
    "availabilitySetId": {
      "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
    },
    "useAS": "[equals(parameters('availabilityOptions'), 'Availability set')]",
    "useAZ": "[and(not(empty(pickZones('Microsoft.Compute', 'virtualMachines', parameters('location')))), equals(parameters('availabilityOptions'), 'Availability zone'))]",
    "pipZones": "[if(variables('useAZ'), pickZones('Microsoft.Network', 'publicIPAddresses', parameters('location'), 3), json('null'))]",
    "zone1": "[if(equals(parameters('availabilityZoneNumber'),''),pickZones('Microsoft.Compute', 'virtualMachines', parameters('location')),array(parameters('availabilityZoneNumber')))]",
    "vnetName": "[if(equals(parameters('vnetName'),''),concat(parameters('fortiGateNamePrefix'),'-vnet'),parameters('vnetName'))]",
    "subnet1Id": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet1Name')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet1Name')))]",
    "subnet2Id": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet2Name')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet2Name')))]",
    "fgtVmName": "[if(equals(parameters('fortiGateName'),''),concat(parameters('fortiGateNamePrefix'),'-fgt'),parameters('fortiGateName'))]",
    "fmgCustomData": "[if(equals(parameters('fortiManager'),'yes'),concat('\nconfig system central-management\nset type fortimanager\n set fmg ',parameters('fortiManagerIP'),'\nset serial-number ', parameters('fortiManagerSerial'), '\nend\n config system interface\n edit port1\n append allowaccess fgfm\n end\n config system interface\n edit port2\n append allowaccess fgfm\n end\n'),'')]",
    "customDataHeader": "Content-Type: multipart/mixed; boundary=\"12345\"\nMIME-Version: 1.0\n\n--12345\nContent-Type: text/plain; charset=\"us-ascii\"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 7bit\nContent-Disposition: attachment; filename=\"config\"\n\n",
    "customDataBody": "[concat('config system global\nset hostname ', variables('fgtVmName'), '\nend\nconfig system sdn-connector\nedit AzureSDN\nset type azure\nnext\nend\nconfig router static\nedit 1\nset gateway ', variables('sn1GatewayIP'), '\nset device port1\nnext\nedit 2\nset dst ', parameters('vnetAddressPrefix'), '\nset gateway ', variables('sn2GatewayIP'), '\nset device port2\nnext\nend\nconfig system interface\nedit port1\nset mode static\nset ip ',  variables('sn1IPfgt'), '/', variables('sn1CIDRmask'), '\nset description external\nset allowaccess ping ssh https\nnext\nedit port2\nset mode static\nset ip ', variables('sn2IPfgt'), '/', variables('sn2CIDRmask'), '\nset description internal\nset allowaccess ping ssh https\nnext\nend\n', variables('fmgCustomData'), parameters('fortiGateAdditionalCustomData'), '\n')]",
    "customDataLicenseHeader": "--12345\nContent-Type: text/plain; charset=\"us-ascii\"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 7bit\nContent-Disposition: attachment; filename=\"license\"\n\n",
    "customDataFooter": "\n--12345--\n",
    "customDataFortiFlex": "[if(equals(parameters('fortiGateLicenseFortiFlex'),''),'',concat('LICENSE-TOKEN:',parameters('fortiGateLicenseFortiFlex'), '\n'))]",
    "customDataCombined": "[concat(variables('customDataHeader'),variables('customDataBody'),variables('customDataLicenseHeader'), variables('customDataFortiFlex'), parameters('fortiGateLicenseBYOL'), variables('customDataFooter'))]",
    "fgtCustomData": "[base64(if(and(equals(parameters('fortiGateLicenseBYOL'),''),equals(parameters('fortiGateLicenseFortiFlex'),'')),variables('customDataBody'),variables('customDataCombined')))]",
    "routeTableProtectedName": "[concat(parameters('fortiGateNamePrefix'),'-routetable-',parameters('subnet3Name'))]",
    "routeTableProtectedId": "[resourceId('Microsoft.Network/routeTables',variables('routeTableProtectedName'))]",
    "fgtNic1Name": "[concat(variables('fgtVmName'),'-nic1')]",
    "fgtNic1Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fgtNic1Name'))]",
    "fgtNic2Name": "[concat(variables('fgtVmName'),'-nic2')]",
    "fgtNic2Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fgtNic2Name'))]",
    "serialConsoleEnabled": "[if(equals(parameters('serialConsole'),'yes'),'true','false')]",
    "publicIP1Name": "[if(equals(parameters('publicIP1Name'),''),concat(parameters('fortiGateNamePrefix'),'-fgt-pip'),parameters('publicIP1Name'))]",
    "publicIP1Id": "[if(equals(parameters('publicIP1NewOrExisting'),'new'),resourceId('Microsoft.Network/publicIPAddresses',variables('publicIP1Name')),resourceId(parameters('publicIP1ResourceGroup'),'Microsoft.Network/publicIPAddresses',variables('publicIP1Name')))]",
    "publicIP1AddressId": {
      "id": "[variables('publicIP1Id')]"
    },
    "nsgName": "[concat(parameters('fortiGateNamePrefix'),'-nsg')]",
    "nsgId": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('nsgName'))]",
    "sn1IPArray": "[split(parameters('subnet1Prefix'),'.')]",
    "sn1IPArray2ndString": "[string(variables('sn1IPArray')[3])]",
    "sn1IPArray2nd": "[split(variables('sn1IPArray2ndString'),'/')]",
    "sn1CIDRmask": "[string(int(variables('sn1IPArray2nd')[1]))]",
    "sn1IPArray3": "[string(add(int(variables('sn1IPArray2nd')[0]),1))]",
    "sn1IPArray2": "[string(int(variables('sn1IPArray')[2]))]",
    "sn1IPArray1": "[string(int(variables('sn1IPArray')[1]))]",
    "sn1IPArray0": "[string(int(variables('sn1IPArray')[0]))]",
    "sn1GatewayIP": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',variables('sn1IPArray3'))]",
    "sn1IPStartAddress": "[split(parameters('subnet1StartAddress'),'.')]",
    "sn1IPfgt": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',int(variables('sn1IPStartAddress')[3]))]",
    "sn2IPArray": "[split(parameters('subnet2Prefix'),'.')]",
    "sn2IPArray2ndString": "[string(variables('sn2IPArray')[3])]",
    "sn2IPArray2nd": "[split(variables('sn2IPArray2ndString'),'/')]",
    "sn2CIDRmask": "[string(int(variables('sn2IPArray2nd')[1]))]",
    "sn2IPArray3": "[string(add(int(variables('sn2IPArray2nd')[0]),1))]",
    "sn2IPArray2": "[string(int(variables('sn2IPArray')[2]))]",
    "sn2IPArray1": "[string(int(variables('sn2IPArray')[1]))]",
    "sn2IPArray0": "[string(int(variables('sn2IPArray')[0]))]",
    "sn2GatewayIP": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',variables('sn2IPArray3'))]",
    "sn2IPStartAddress": "[split(parameters('subnet2StartAddress'),'.')]",
    "sn2IPfgt": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',int(variables('sn2IPStartAddress')[3]))]",
    "imageReferenceMarketplace": {
      "publisher": "[variables('imagePublisher')]",
      "offer": "[variables('imageOffer')]",
      "sku": "[variables('fortiGateImageSKU')]",
      "version": "[variables('FortigateImageVersion')]"
    },
    "imageReferenceCustomImage": {
      "id": "[parameters('customImageReference')]"
    },
    "virtualMachinePlan": {
      "name": "[variables('fortiGateImageSKU')]",
      "publisher": "[variables('imagePublisher')]",
      "product": "[variables('imageOffer')]"
    },
    "fastpathtag": {
      "fastpathenabled": "[if(and(equals(parameters('acceleratedNetworking'),'true'),parameters('acceleratedConnections')),'true','false')]"
    },
    "auxiliaryMode": "[if(and(equals(parameters('acceleratedNetworking'),'true'),parameters('acceleratedConnections')),'AcceleratedConnections','None')]",
    "auxiliarySku": "[if(and(equals(parameters('acceleratedNetworking'),'true'),parameters('acceleratedConnections')),parameters('acceleratedConnectionsSku'),'None')]"
  },
  "resources": [
    {
      "apiVersion": "2023-07-01",
      "name": "[concat(parameters('fortiGateNamePrefix'), '-fortinetdeployment-', uniquestring(resourceGroup().id))]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "condition": "[and(variables('useAS'),equals(parameters('existingAvailabilitySetName'),''))]",
      "name": "[variables('availabilitySetName')]",
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "2023-03-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Compute/availabilitySets'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Compute/availabilitySets']), parameters('fortinetTags')) ]",
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]",
      "name": "[variables('vnetName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-06-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/virtualNetworks'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/virtualNetworks']), parameters('fortinetTags')) ]",
      "dependsOn": [
        "[variables('routeTableProtectedId')]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnet1Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet1Prefix')]"
            }
          },
          {
            "name": "[parameters('subnet2Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet2Prefix')]"
            }
          },
          {
            "name": "[parameters('subnet3Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet3Prefix')]",
              "routeTable": {
                "id": "[variables('routeTableProtectedId')]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]",
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('routeTableProtectedName')]",
      "apiVersion": "2023-06-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/routeTables'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/routeTables']), parameters('fortinetTags')) ]",
      "properties": {
        "routes": [
          {
            "name": "VirtualNetwork",
            "properties": {
              "addressPrefix": "[parameters('vnetAddressPrefix')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('sn2IPfgt')]"
            }
          },
          {
            "name": "Subnet",
            "properties": {
              "addressPrefix": "[parameters('subnet3Prefix')]",
              "nextHopType": "VnetLocal"
            }
          },
          {
            "name": "Default",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('sn2IPfgt')]"
            }
          }
        ]
      }
    },
    {
      "name": "[variables('nsgName')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-06-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkSecurityGroups'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/networkSecurityGroups']), parameters('fortinetTags')) ]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowAllInbound",
            "properties": {
              "description": "Allow all in",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowAllOutbound",
            "properties": {
              "description": "Allow all out",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 105,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('publicIP1NewOrExisting'), 'new')]",
      "name": "[variables('publicIP1Name')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2023-06-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/publicIPAddresses'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/publicIPAddresses']), parameters('fortinetTags')) ]",
      "sku": {
        "name": "Standard"
      },
      "zones": "[variables('pipZones')]",
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(toLower(variables('fgtVmName')), '-', uniquestring(resourceGroup().id))]"
        }
      }
    },
    {
      "name": "[variables('fgtNic1Name')]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2023-06-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/networkInterfaces'],variables('fastpathtag')), union(parameters('fortinetTags'),variables('fastpathtag'))) ]",
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('nsgId')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn1IPfgt')]",
              "privateIPAllocationMethod": "Static",
              "publicIPAddress": "[if(not(equals(parameters('publicIP1NewOrExisting'), 'none')), variables('publicIP1AddressId') , json('null'))]",
              "subnet": {
                "id": "[variables('subnet1Id')]"
              }
            }
          }
        ],
        "enableIPForwarding": true,
        "enableAcceleratedNetworking": "[parameters('acceleratedNetworking')]",
        "auxiliaryMode": "[variables('auxiliaryMode')]",
        "auxiliarySku": "[variables('auxiliarySku')]",
        "networkSecurityGroup": {
          "id": "[variables('nsgId')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('fgtNic2Name')]",
      "apiVersion": "2023-06-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/networkInterfaces'],variables('fastpathtag')), union(parameters('fortinetTags'),variables('fastpathtag'))) ]",
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('nsgId')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('sn2IPfgt')]",
              "subnet": {
                "id": "[variables('subnet2Id')]"
              }
            }
          }
        ],
        "enableIPForwarding": true,
        "enableAcceleratedNetworking": "[parameters('acceleratedNetworking')]",
        "auxiliaryMode": "[variables('auxiliaryMode')]",
        "auxiliarySku": "[variables('auxiliarySku')]",
        "networkSecurityGroup": {
          "id": "[variables('nsgId')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('fgtVmName')]",
      "apiVersion": "2023-03-01",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Compute/virtualMachines'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Compute/virtualMachines']), parameters('fortinetTags')) ]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "zones": "[if(variables('useAZ'), variables('zone1'), json('null'))]",
      "plan": "[if(and(or(equals(variables('fortiGateImageSKU'),'fortinet_fg-vm'),equals(variables('fortiGateImageSKU'),'fortinet_fg-vm_arm64')),not(equals(parameters('customImageReference'),''))), json('null'), variables('virtualMachinePlan'))]",
      "dependsOn": [
        "[variables('fgtNic1Id')]",
        "[variables('fgtNic2Id')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('instanceType')]"
        },
        "availabilitySet": "[if(variables('useAS'), variables('availabilitySetId'), json('null'))]",
        "osProfile": {
          "computerName": "[variables('fgtVmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[variables('fgtCustomData')]"
        },
        "storageProfile": {
          "imageReference": "[if(and(or(equals(variables('fortiGateImageSKU'),'fortinet_fg-vm'),equals(variables('fortiGateImageSKU'),'fortinet_fg-vm_arm64')),not(equals(parameters('customImageReference'),''))), variables('imageReferenceCustomImage'), variables('imageReferenceMarketplace'))]",
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": 30,
              "lun": 0,
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "properties": {
                "primary": true
              },
              "id": "[variables('fgtNic1Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('fgtNic2Id')]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "[variables('serialConsoleEnabled')]"
          }
        }
      }
    }
  ],
  "outputs": {
    "fortiGatePublicIP": {
      "type": "string",
      "value": "[if(not(equals(parameters('publicIP1NewOrExisting'), 'none')), reference(variables('publicIP1Id')).ipAddress, '')]"
    },
    "fortiGateFQDN": {
      "type": "string",
      "value": "[if(not(equals(parameters('publicIP1NewOrExisting'), 'none')), reference(variables('publicIP1Id')).dnsSettings.fqdn, '' )]"
    }
  }
}
